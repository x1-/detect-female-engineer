// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAccesses(t *testing.T) {
	t.Parallel()

	query := Accesses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccessesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccessesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Accesses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccessesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccessSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccessesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AccessExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Access exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccessExists to return true, but got false.")
	}
}

func testAccessesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	accessFound, err := FindAccess(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if accessFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccessesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Accesses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAccessesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Accesses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccessesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accessOne := &Access{}
	accessTwo := &Access{}
	if err = randomize.Struct(seed, accessOne, accessDBTypes, false, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}
	if err = randomize.Struct(seed, accessTwo, accessDBTypes, false, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accessOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accessTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Accesses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccessesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accessOne := &Access{}
	accessTwo := &Access{}
	if err = randomize.Struct(seed, accessOne, accessDBTypes, false, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}
	if err = randomize.Struct(seed, accessTwo, accessDBTypes, false, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = accessOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accessTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accessBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func accessAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Access) error {
	*o = Access{}
	return nil
}

func testAccessesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Access{}
	o := &Access{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accessDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Access object: %s", err)
	}

	AddAccessHook(boil.BeforeInsertHook, accessBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accessBeforeInsertHooks = []AccessHook{}

	AddAccessHook(boil.AfterInsertHook, accessAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accessAfterInsertHooks = []AccessHook{}

	AddAccessHook(boil.AfterSelectHook, accessAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accessAfterSelectHooks = []AccessHook{}

	AddAccessHook(boil.BeforeUpdateHook, accessBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accessBeforeUpdateHooks = []AccessHook{}

	AddAccessHook(boil.AfterUpdateHook, accessAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accessAfterUpdateHooks = []AccessHook{}

	AddAccessHook(boil.BeforeDeleteHook, accessBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accessBeforeDeleteHooks = []AccessHook{}

	AddAccessHook(boil.AfterDeleteHook, accessAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accessAfterDeleteHooks = []AccessHook{}

	AddAccessHook(boil.BeforeUpsertHook, accessBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accessBeforeUpsertHooks = []AccessHook{}

	AddAccessHook(boil.AfterUpsertHook, accessAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accessAfterUpsertHooks = []AccessHook{}
}

func testAccessesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccessesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(accessColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccessesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccessesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccessSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAccessesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Accesses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accessDBTypes = map[string]string{`ID`: `int`, `Account`: `varchar`, `Tweet`: `varchar`, `PredictedSex`: `int`, `ProbabilitySex`: `double`, `PredictedEngineer`: `int`, `ProbabilityEngineer`: `double`, `CreatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testAccessesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(accessPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(accessColumns) == len(accessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accessDBTypes, true, accessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAccessesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accessColumns) == len(accessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Access{}
	if err = randomize.Struct(seed, o, accessDBTypes, true, accessColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accessDBTypes, true, accessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accessColumns, accessPrimaryKeyColumns) {
		fields = accessColumns
	} else {
		fields = strmangle.SetComplement(
			accessColumns,
			accessPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AccessSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAccessesUpsert(t *testing.T) {
	t.Parallel()

	if len(accessColumns) == len(accessPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAccessUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Access{}
	if err = randomize.Struct(seed, &o, accessDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Access: %s", err)
	}

	count, err := Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, accessDBTypes, false, accessPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Access struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Access: %s", err)
	}

	count, err = Accesses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
